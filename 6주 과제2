#include <iostream>
#include <string>
using namespace std;

class PhoneBook
{
private:
	string number; // 전화번호
	string name; // 이름
public:
	PhoneBook() // 생성자
	{}
	void setPnum(string number) // 전화번호 저장
	{
		(*this).number = number;
	}
	void setName(string name) // 이름 저장
	{
		(*this).name = name;
	}
	void addPhone(string name, string number) // 이름과 전화번호 저장
	{
		(*this).number = number;
		(*this).name = name;
	}
	string getPnum() // 전화번호 가져오기
	{
		return number;
	}
	string getName() // 이름 가져오기
	{
		return name;
	}
};
class PhoneBookManager 
{
private:
	PhoneBook* phoneB; // 객체 배열 생성을 위한 선언
	int size; // 객체 배열의 크기
public:
	PhoneBookManager(int num) // 생성자 – PhoneBook으로 객체 배열 생성
	{
		size = num; //사용자가 입력한 수를 size에 대입
		phoneB = new PhoneBook[size]; //동적 객체 생성

		string putName, putNumber;
		for (int i = 0; i < size; i++) //size 수만큼 이름과 번호를 입력받을 반복문
		{
			cout << i + 1 << "번째 사람의 이름을 입력해주세요 >> ";
			cin >> putName;
			phoneB[i].setName(putName);

			cout << i + 1 << "번째 사람의 전화번호를 입력해주세요 >> ";
			cin >> putNumber;
			phoneB[i].setPnum(putNumber);
		}
	}

	void showAll() // 전화번호부 목록 보기
	{
		for (int i = 0; i < size; i++) //size에 해당하는 번호만큼 목록을 보여주는 반복문
		{
			cout << i + 1  << ". " << phoneB[i].getName()
				<< "::" << phoneB[i].getPnum() << endl;
		}
	}

	void searchPnum() // 전화번호 찾기
	{
		cout << "누구의 번호를 검색하겠습니까? >> ";
		string searchName;
		cin >> searchName;

		int checkName = -1; //사용자가 검색한 이름의 존재여부 확인을 위한 변수
		for (int i = 0; i < size; i++)
		{
			if (searchName == phoneB[i].getName()) //사용자가 검색한 이름의 객체가 존재
				checkName = i; //checkName 변수에 해당 인덱스 값 대입
		}

		if (checkName == -1) //사용자가 검색한 이름의 객체가 존재하지 않을 때
			cout << "연락처가 존재하지 않습니다." << endl << endl;
		else //사용자가 검색한 이름의 객체가 존재할 때
			cout << phoneB[checkName].getName() << "님의 전화번호 : " << phoneB[checkName].getPnum() << endl << endl;
	}

	void addPnum() // 전화번호 객체 추가 생성 (배열의 원소 개수가 +1되야 함)
	{
		cout << "이름을 입력해주세요 >> ";
		string addName;
		cin >> addName;

		cout << "전화번호를 입력해주세요 >> ";
		string addPnum;
		cin >> addPnum;

		PhoneBook* temp = new PhoneBook[size + 1]; //기존 배열을 저장해줄 임시 배열 선언

		for (int i = 0; i < size; i++) //temp배열에 기존 배열값을 대입
			temp[i] = phoneB[i];

		delete[] phoneB; //기존 배열 메모리 반환
		size++; //사이즈 1 증가

		phoneB = new PhoneBook[size]; //새 배열 선언
		for (int i = 0; i < size; i++) //새로운 배열에 temp 배열값을 대입
			phoneB[i] = temp[i];

		phoneB[size-1].addPhone(addName, addPnum);

		cout << "전화번호가 추가되었습니다." << endl;
	}
	void editPnum() // 전화번호 수정
	{
		cout << "누구의 번호를 수정하겠습니까? >> ";
		string editName;
		cin >> editName;
		
		int checkName = -1; //사용자가 검색한 이름의 존재여부 확인을 위한 변수
		for (int i = 0; i < size; i++)
		{
			if (editName == phoneB[i].getName()) //사용자가 검색한 이름의 객체가 존재
				checkName = i; //checkName 변수에 해당 인덱스 값 대입
		}

		if (checkName == -1) //사용자가 검색한 이름의 객체가 존재하지 않을 때
			cout << "연락처가 존재하지 않습니다.\n" << endl;
		else //사용자가 검색한 이름의 객체가 존재할 때
		{
			cout << "변경할 번호를 입력해주세요 >> ";
			string editPnum;
			cin >> editPnum;
			phoneB[checkName].setPnum(editPnum);
			cout << "\n전화번호가 변경되었습니다.\n"  << endl;
		}
	}
};

int main() 
{
	cout << "--- SWING 전화번호부 ---\n" 
		<< "저장할 전화번호 수를 입력해주세요 >> ";
	int num; //사용자가 입력할 전화번호 개수
	cin >> num;

	PhoneBookManager Pmanager(num);
	int select = 0;
	do 
	{
		cout << "--- SWING 전화번호부 --- " << endl
			<< "1. 전화번호부 보기" << endl
			<< "2. 전화번호 검색" << endl
			<< "3. 전화번호 추가하기" << endl
			<< "4. 전화번호 수정하기" << endl
			<< "5. 종료" << endl
			<< "번호를 입력해주세요 >> ";

		cin >> select;

		switch (select)
		{
		case 1:
			Pmanager.showAll();
			cout << endl;
			break;
		case 2:
			Pmanager.searchPnum();
			break;

		case 3:
			Pmanager.addPnum();
			break;

		case 4:
			Pmanager.editPnum();
			break;
		case 5:
			break;

		default:
			cout << endl <<  "\n잘못입력하셨습니다." << endl;
			break;
		}
	} while (select != 5); //사용자가 5를 입력할 때까지 반복

	cout << "프로그램을 종료합니다." << endl;

	return 0;
}
