#include <iostream>
#include <string>
using namespace std;

class ATM 
{
private:
	string name; //계좌주 이름
	int pw = 0; // 계좌 비밀번호
	int money = 0; // 계좌 잔액
public:
	ATM() // 생성자
	{}
	void deposit() // 입금
	{
		int inmon;
		cin >> inmon;
		money += inmon;
	}
	void withdraw() // 인출
	{
		int outmon;
		cin >> outmon;
		money -= outmon;
	}
	void send(string receiver, int sendMon) // 이체 - 받음
	{
		money += sendMon;
	}
	void receive(int receiveMon) // 이체 - 보냄
	{
		money -= receiveMon;
	}
	int getMoney() // 얼마있는지 출력
	{
		return money;
	}
	string getName() // 이름 불러오기
	{
		return name;
	}
	void setName()
	{
		cin >> name;
	}

	void setPw()
	{
		cin >> pw;
	}

	void setMoney()
	{
		cin >> money;
	}

	void checkPw() //비밀번호가 다르다면 다시 입력
	{
		int rePw;
		cin >> rePw;
		while (rePw != pw)
		{
			cout << "비밀번호가 틀렸습니다.\n" << endl
				<< "비밀번호를 다시 입력해주세요 >> ";
			cin >> rePw;
		}
	}
};

int main()
{
	cout << "은행에 가입할 인원을 입력해주세요 >> ";
	int num;
	cin >> num;
	ATM* atm = new ATM[num]; //사용자가 입력한 만큼 동적 개체 생성

	for (int i = 0; i < num; i++)
	{
		cout << endl << i + 1 << "번째 손님" << endl << endl;
		cout << "성명을 적어주십시오 >> ";
		atm[i].setName();
		cout << "비밀번호를 입력해주세요 >> ";
		atm[i].setPw();
		cout << "한 번 더 입력해주세요 >> ";
		atm[i].checkPw();
		cout << "입금할 금액을 입력해주세요 >> ";
		atm[i].setMoney();
		cout << endl << endl;
	}

	string putName = "n"; //사용자가 입력할 이름 받을 변수
	int k = -1; //차후 과정을 위해 사용자가 맞을 시 인덱스 값을 저장할 k
	string receiver; //이체 받을 사람 이름 받을 변수
	int j = -1; //차후 과정을 위해 이체 받을 사람의 인덱스 값을 저장할 k
	int sendMoney; //사용자가 이체할 금액
	int checkReceiver = -1; //이체받을 계좌주 확인을 위한 변수 초기화
	do //x를 누르기 전까지 프로그램 반복
	{
		int checkName = -1; //사용자 존재 확인을 위한 변수 선언 및 초기화
		while (checkName == -1) //해당 사용자가 없을 시 다시 안내문 반복문
		{
			cout << endl << "--- SWING ATM ---\n" <<
				"성함을 입력해주세요 (종료라면 x를 입력해주세요) >> ";
			cin >> putName;

			if (putName == "x") //x입력시 안내문 반복문 탈출
				break;

			

			for (int i = 0; i < num; i++)
			{
				if (putName == atm[i].getName())
				{
					checkName = 1; //사용자가 존재하면 checkName에 1 대입
					k = i;
				}
			}

			if (checkName == -1) //입력한 사용자가 존재하지 않을 시
				cout << "존재하지 않는 계좌주입니다.";
			else //사용자가 존재해 checkName이 -1이 아닌 1인 경우
				break; //반복문 탈출
		}

		if (putName == "x") //x입력시 안내문 반복문 탈출
			break;

		int select = 0; //사용자가 선택할 번호 while문을 위해 미리 선언 및 초기화
		
		while (select != 5) //사용자 선택사항 반복을 위해 while문
		{
			cout << "\n --- SWING ATM " << putName << "님 ---\n"
			<< "1. 입금" << endl
			<< "2. 인출" << endl
			<< "3. 이체" << endl
			<< "4. 잔액 확인" << endl
			<< "5. 종료\n"<< endl
			<< "번호를 선택해주세요 >> ";
			cin >> select;

			switch (select)
			{
				case 1:
				{
					cout << "입금할 금액을 입력해주세요 >> ";
					atm[k].deposit();
					cout << putName << "님의 현재 잔액은 " << atm[k].getMoney()
						<< "원 입니다.";
				}
				break;
				
				case 2:
				{
					cout << "얼마를 인출하시겠습니까? >> ";
					atm[k].withdraw();
					cout << "비밀번호를 입력하세요 >> ";
					atm[k].checkPw();
					cout << putName << "님의 현재 잔액은 " << atm[k].getMoney()
						<< "원 입니다.";
				}
				break;

				case 3:
				{
					cout << "누구에게 보내겠습니까? >> ";
					cin >> receiver;
					for (int i = 0; i < num; i++)
					{
						if (receiver == atm[i].getName())
						{
							checkReceiver = 1; //사용자가 존재하면 checkName에 1 대입
							j = i;
						}
					}

					if (checkReceiver == -1)//이체받을 계좌주가 존재하지 않을 시
						break; //케이스문 탈출
					else  //이체받을 계좌주 존재시
					{
						cout << "얼마를 보내겠습니까? >> ";
						cin >> sendMoney; 

						atm[k].send(atm[j].getName(), sendMoney); 
						cout << "비밀번호를 입력해주세요 >> ";
						atm[k].checkPw();
						cout << endl << atm[j].getName() << "님께 " << sendMoney << "원을 보냈습니다." << endl;
						atm[k].receive(sendMoney);
						cout << endl << "현재 " << atm[k].getName() << "님의 잔액은 "
							<< atm[k].getMoney() << "원 입니다." << endl;
						break;
					}
				}
				case 4:
				{
					cout << atm[k].getName() << "님의 현재 잔액은 " << atm[k].getMoney() << "원 입니다." << endl;
				}
					break;
			}
		}
	} while (putName != "x");

	cout << "ATM을 종료합니다.";
	return 0;
}
